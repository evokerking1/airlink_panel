<%- include('../../components/header', { title: req.translations.aiIntegrationSettings || 'AI Integration Settings' }) %>

<main class="h-screen m-auto">
  <div class="flex h-screen">
    <!-- Sidebar -->
    <div class="w-60 h-full">
      <%- include('../../components/template') %>
    </div>
    <!-- Content -->
    <div class="flex-1 p-6 overflow-y-auto pt-16">
      <!-- Page Header -->
      <div class="sm:flex sm:items-center px-8 pt-4">
        <div class="sm:flex-auto">
           <h1 class="text-base font-medium leading-6 text-neutral-800 dark:text-white"><%= req.translations.aiIntegrationSettings || 'AI Integration Settings' %></h1>
           <p class="mt-1 tracking-tight text-sm text-neutral-500"><%= req.translations.aiIntegrationSettingsText || 'Configure AI integration for your panel' %></p>
         </div>
       </div>
       <div class="px-8 mt-5">

        <%- include('../../components/settingsTemplate') %>

        <div class="flex flex-col bg-white/5 pt-0 py-5 rounded-xl">
            <h1 class="text-white text-[18px] px-5 py-4 mb-1 w-full bg-white/5 rounded-t-xl font-medium"><%= req.translations.aiIntegration || 'AI Integration' %></h1>
            <form id="aiSettingsForm" class="space-y-6">
              <div class="grid grid-cols-1 gap-6 px-5 mt-5">
                  <div class="flex items-center">
                      <label class="relative inline-flex items-center cursor-pointer">
                          <input type="checkbox" id="aiEnabled" name="aiEnabled" class="sr-only peer" <%= settings.aiEnabled ? 'checked' : '' %>>
                          <div class="w-11 h-6 bg-neutral-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-neutral-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-neutral-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-neutral-600 peer-checked:bg-blue-600"></div>
                          <span class="ms-3 text-sm font-medium text-white"><%= req.translations.enableAiIntegration || 'Enable AI Integration' %></span>
                      </label>
                  </div>

                  <div>
                      <label class="block text-white text-sm font-medium mb-2"><%= req.translations.aiEndpointUrl || 'AI Endpoint URL' %></label>
                      <input
                          type="text"
                          name="aiEndpoint"
                          value="<%= settings.aiEndpoint %>"
                          placeholder="<%= req.translations.aiEndpointPlaceholder || 'https://api.openai.com/v1' %>"
                          class="rounded-xl focus:ring focus:ring-neutral-800/10 focus:border-neutral-800/20 text-neutral-800 dark:text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-400/10 dark:bg-neutral-600/20 placeholder:text-neutral-950/50 dark:placeholder:text-white/20 border border-neutral-800/10 dark:border-white/5 transition-all"
                      >
                  </div>

                  <div>
                      <label class="block text-white text-sm font-medium mb-2"><%= req.translations.apiKeyOptional || 'API Key (Optional)' %></label>
                      <input
                          type="password"
                          name="aiApiKey"
                          value="<%= settings.aiApiKey %>"
                          placeholder="<%= req.translations.enterYourApiKey || 'Enter your API key' %>"
                          class="rounded-xl focus:ring focus:ring-neutral-800/10 focus:border-neutral-800/20 text-neutral-800 dark:text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-400/10 dark:bg-neutral-600/20 placeholder:text-neutral-950/50 dark:placeholder:text-white/20 border border-neutral-800/10 dark:border-white/5 transition-all"
                      >
                  </div>

                  <div>
                      <label class="block text-white text-sm font-medium mb-2"><%= req.translations.aiModel || 'AI Model' %></label>


                      <div id="modelDropdownContainer" class="relative">
                          <select
                              id="aiModelDropdown"
                              name="aiModel"
                              class="rounded-xl focus:ring focus:ring-neutral-800/10 focus:border-neutral-800/20 text-neutral-800 dark:text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-400/10 dark:bg-neutral-600/20 border border-neutral-800/10 dark:border-white/5 transition-all appearance-none"
                          >
                              <option value="" <%= !settings.aiModel ? 'selected' : '' %>><%= req.translations.autoDefault || "Auto (Default)" %></option>
                              <% if (settings.aiModel) { %>
                                  <option value="<%= settings.aiModel %>" selected><%= settings.aiModel %></option>
                              <% } %>

                          </select>
                          <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-neutral-700 dark:text-neutral-300">
                              <svg class="fill-current h-4 w-4 mt-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                  <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                              </svg>
                          </div>
                      </div>


                      <div id="modelTextContainer" class="hidden">
                          <input
                              type="text"
                              id="aiModelText"
                              name="aiModel"
                              value="<%= settings.aiModel %>"
                              placeholder="<%= req.translations.enterModelName || 'Enter model name (e.g., gpt-4o, gpt-3.5-turbo)' %>"
                              class="rounded-xl focus:ring focus:ring-neutral-800/10 focus:border-neutral-800/20 text-neutral-800 dark:text-white text-sm mt-2 mb-4 w-full hover:bg-white/5 px-4 py-2 bg-neutral-400/10 dark:bg-neutral-600/20 placeholder:text-neutral-950/50 dark:placeholder:text-white/20 border border-neutral-800/10 dark:border-white/5 transition-all"
                          >
                      </div>


                      <div id="modelLoadingIndicator" class="text-sm text-neutral-500 dark:text-neutral-400 hidden">
                          <svg class="animate-spin -ml-1 mr-2 h-4 w-4 inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          <%= req.translations.loadingAvailableModels || "Loading available models..." %>
                      </div>


                      <div id="modelLoadError" class="text-sm text-neutral-500 dark:text-neutral-400 hidden">
                          <%= req.translations.modelsEndpointNotAvailable || "Models endpoint not available. Please enter the model name manually." %>
                      </div>
                  </div>
              </div>

              <div class="flex justify-end items-center mt-8 space-x-4 px-5">
                  <button
                      type="submit"
                      id="saveButton"
                      class="md:w-auto rounded-lg bg-neutral-950 dark:bg-white hover:bg-neutral-300 text-neutral-200 dark:text-neutral-800 px-6 py-2 text-sm font-medium shadow-md transition focus:outline focus:outline-2 focus:outline-offset-2"
                  >
                      <%= req.translations.saveSettings || 'Save Settings' %>
                  </button>
              </div>
            </form>
        </div>
      </div>
    </div>
  </div>
</main>

<%- include('../../components/toast')%>

<%- include('../../components/footer') %>

<script>
  document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('aiSettingsForm');
      const saveButton = document.getElementById('saveButton');
      const aiEndpointInput = document.querySelector('input[name="aiEndpoint"]');
      const aiApiKeyInput = document.querySelector('input[name="aiApiKey"]');
      const aiModelDropdown = document.getElementById('aiModelDropdown');
      const modelLoadingIndicator = document.getElementById('modelLoadingIndicator');
      const modelLoadError = document.getElementById('modelLoadError');


      async function fetchModels() {
          if (!aiEndpointInput.value) return;

          modelLoadingIndicator.classList.remove('hidden');
          modelLoadError.classList.add('hidden');
          document.getElementById('modelDropdownContainer').classList.add('hidden');
          document.getElementById('modelTextContainer').classList.add('hidden');

          try {
              const response = await fetch('/admin/settings/ai/models', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                      aiEndpoint: aiEndpointInput.value,
                      aiApiKey: aiApiKeyInput.value
                  })
              });

              if (!response.ok) {
                  throw new Error('Failed to fetch models');
              }

              const data = await response.json();

              if (data.success && Array.isArray(data.models) && data.models.length > 0) {
                  document.getElementById('modelDropdownContainer').classList.remove('hidden');
                  document.getElementById('modelTextContainer').classList.add('hidden');

                  const selectedValue = document.getElementById('aiModelDropdown').value;
                  const options = Array.from(document.getElementById('aiModelDropdown').options);
                  const firstOption = options[0];

                  document.getElementById('aiModelDropdown').innerHTML = '';
                  document.getElementById('aiModelDropdown').appendChild(firstOption);
                  data.models.forEach(model => {
                      const option = document.createElement('option');
                      option.value = model;
                      option.textContent = model;
                      if (model === selectedValue) {
                          option.selected = true;
                      }
                      document.getElementById('aiModelDropdown').appendChild(option);
                  });
              } else {
                  showTextInput();
              }
          } catch (error) {
              console.error('Error fetching models:', error);
              showTextInput();
          } finally {
              modelLoadingIndicator.classList.add('hidden');
          }
      }


      function showTextInput() {
          document.getElementById('modelDropdownContainer').classList.add('hidden');
          document.getElementById('modelTextContainer').classList.remove('hidden');
          modelLoadError.classList.remove('hidden');


          const dropdownValue = document.getElementById('aiModelDropdown').value;
          if (dropdownValue && document.getElementById('aiModelText').value === '') {
              document.getElementById('aiModelText').value = dropdownValue;
          }
      }


      aiEndpointInput.addEventListener('change', fetchModels);
      aiApiKeyInput.addEventListener('change', fetchModels);

      if (aiEndpointInput.value) {
          fetchModels();
      } else {
          document.getElementById('modelDropdownContainer').classList.add('hidden');
          document.getElementById('modelTextContainer').classList.remove('hidden');
      }


      form.addEventListener('submit', async (e) => {
          e.preventDefault();

          const originalText = saveButton.innerHTML;
          saveButton.disabled = true;
          saveButton.innerHTML = `
              <svg class="animate-spin -ml-1 mr-2 h-4 w-4 inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <%= req.translations.saving || 'Saving...' %>
          `;

          try {
              const formData = new FormData(form);


              const aiEnabled = formData.get('aiEnabled') === 'on';
              formData.delete('aiEnabled');


              let aiModel = '';
              if (!document.getElementById('modelDropdownContainer').classList.contains('hidden')) {
                  aiModel = document.getElementById('aiModelDropdown').value;
              } else {
                  aiModel = document.getElementById('aiModelText').value;
              }

              const data = {
                  aiEnabled: aiEnabled,
                  aiEndpoint: formData.get('aiEndpoint'),
                  aiApiKey: formData.get('aiApiKey'),
                  aiModel: aiModel
              };

              const response = await fetch('/admin/settings/ai', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(data)
              });

              if (response.ok) {
                  showToast('<%= req.translations.aiSettingsSaved || "AI settings saved successfully!" %>', 'success');
                  setTimeout(() => {
                      window.location.reload();
                  }, 1500);
              } else {
                  const errorData = await response.json().catch(() => ({}));
                  throw new Error(errorData.error || '<%= req.translations.failedToSaveAiSettings || "Failed to save AI settings" %>');
              }
          } catch (error) {
              console.error('Error:', error);
              showToast(error.message || '<%= req.translations.failedToSaveAiSettings || "Failed to save AI settings" %>', 'error');


              saveButton.disabled = false;
              saveButton.innerHTML = originalText;
          }
      });
  });
</script>
